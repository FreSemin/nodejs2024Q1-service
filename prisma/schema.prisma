// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        String @id @default(uuid()) @db.Uuid
  login     String
  password  String
  version   Int    @default(1)
  createdAt BigInt @map("created_at")
  updatedAt BigInt @map("updated_at")

  @@map("users")
}

model Artist {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  grammy           Boolean            @default(false)
  Album            Album[]
  Track            Track[]
  FavoritesArtists FavoritesArtists[]

  @@map("artists")
}

model Album {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  year            Int
  artist          Artist?           @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId        String?           @map("artist_id") @db.Uuid
  Track           Track[]
  FavoritesAlbums FavoritesAlbums[]

  @@map("albums")
}

model Track {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  duration        Int               @default(0)
  artist          Artist?           @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId        String?           @map("artist_id") @db.Uuid
  album           Album?            @relation(fields: [albumId], references: [id], onDelete: SetNull)
  albumId         String?           @map("album_id") @db.Uuid
  FavoritesTracks FavoritesTracks[]

  @@map("tracks")
}

model FavoritesArtists {
  id       String @id @default(uuid()) @db.Uuid
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String @db.Uuid

  @@map("favorites_artists")
}

model FavoritesAlbums {
  id      String @id @default(uuid()) @db.Uuid
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String @db.Uuid

  @@map("favorites_albums")
}

model FavoritesTracks {
  id      String @id @default(uuid()) @db.Uuid
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String @db.Uuid

  @@map("favorites_tracks")
}
